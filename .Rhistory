plot(testCPDAG)
plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll, "edges can be
detected in the limit of infinite data."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
plot(testDAG_reduced)
plot(testDAG_reduced)
plot(testCPDAG_reduced)
plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
n_variables <- 150
n_observed <- 100
testDAG <- randDAG(n_variables,2,weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
plot(testDAG)
plot(testDAG)
plot(testCPDAG)
plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll, "edges can be
detected in the limit of infinite data."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
plot(testDAG_reduced)
plot(testDAG_reduced)
plot(testCPDAG_reduced)
plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
n_variables <- 300
n_observed <- 100
testDAG <- randDAG(n_variables,2,weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll, "edges can be
detected in the limit of infinite data."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
library(SGS)
library(pcalg)
library(igraph)
# how many edges could be identified with infinate data?
n_variables <- 300
n_observed <- 100
testDAG <- randDAG(n_variables,2,weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll, "edges can be
detected in the limit of infinite data."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
detectable_causal_edges <- function(n_variables, n_observed){
# get how many edges can be detected via causal structure learning
testDAG <- randDAG(n_variables,2,weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll, "edges can be
detected in the limit of infinite data."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(100,50)
detectable_causal_edges <- function(n_variables, n_observed){
# get how many edges can be detected via causal structure learning
testDAG <- randDAG(n_variables,2,weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll,
"edges can be detected in the limit of infinite data."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges <- function(n_variables, n_observed){
# get how many edges can be detected via causal structure learning
testDAG <- randDAG(n_variables,2,weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when all variables are observed."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(10,50)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges(10,5)
detectable_causal_edges <- function(n_variables, n_observed){
# get how many edges can be detected via causal structure learning
# testDAG <- randDAG(n_variables,2,weighted = FALSE)
testDAG <- randDAG(n_variables)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when all variables are observed."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(10,5)
detectable_causal_edges(100,50)
randDAG(10)
randDAG(100)
randDAG(100,3)
randDAG(100,2)
randDAG(100,3)
detectable_causal_edges <- function(n_variables, n_observed){
# get how many edges can be detected via causal structure learning
# testDAG <- randDAG(n_variables,2,weighted = FALSE)
testDAG <- randDAG(n_variables,3)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when all variables are observed."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges <- function(n_variables, n_observed){
# get how many edges can be detected via causal structure learning
# testDAG <- randDAG(n_variables,2,weighted = FALSE)
testDAG <- randDAG(n_variables,3, weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when all variables are observed."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(100,50)
detectable_causal_edges(1000,50)
detectable_causal_edges(1000,100)
detectable_causal_edges <- function(n_variables, n_observed){
# get how many causal edges can be detected via causal structure learning
# testDAG <- randDAG(n_variables,2,weighted = FALSE)
testDAG <- randDAG(n_variables,3, weighted = FALSE)
testCPDAG <- dag2cpdag(testDAG)
# plot(testDAG)
# plot(testDAG)
# plot(testCPDAG)
# plot(testCPDAG)
CPDAGad <- as(testCPDAG, "matrix")
DAGad <- as(testDAG, "matrix")
PDAGad <- t(CPDAGad)-CPDAGad
numbDetectable <- sum(abs(PDAGad))/2
numbAll <- sum(DAGad)
print(paste("In this example ", numbDetectable, "causal edges out of", numbAll,
"edges can be detected in the limit of infinite data, when all variables are observed."))
# now lets consider latend variables
igraph_testDAG <- graph_from_graphnel(testDAG)
igraph_testDAG_reduced <- subgraph(igraph_testDAG, sample(1:1:n_variables, n_observed))
testDAG_reduced <- as_graphnel(igraph_testDAG_reduced)
testCPDAG_reduced <- dag2cpdag(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testDAG_reduced)
# plot(testCPDAG_reduced)
# plot(testCPDAG_reduced)
CPDAGad_reduced <- as(testCPDAG_reduced, "matrix")
DAGad_reduced <- as(testDAG_reduced, "matrix")
PDAGad_reduced <- t(CPDAGad_reduced)-CPDAGad_reduced
numbDetectable_reduced <- sum(abs(PDAGad_reduced))/2
numbAll_reduced <- sum(DAGad_reduced)
print(paste("In this example ", numbDetectable_reduced, "causal edges out of", numbAll,
"edges can be detected in the limit of infinite data, when", n_observed, "out of",
n_variables, "variables have been observed."))
}
detectable_causal_edges(1000,100)
detectable_causal_edges(1000,201)
detectable_causal_edges(800,201)
library(BiDAG)
BiDAG::edgep
Asiascore<-scoreparameters("bde", Asia)
BiDAG::learnBN()
eDAG<-learnBN(Asiascore,algorithm="order")
compareDAGs(eDAG$DAG,Asiamat)
eDAG
BiDAG::edgep
learnBN
eDAG$trace
Bostonscore<-scoreparameters("bge", Boston)
## Not run:
samplefit<-sampleBN(Bostonscore, "order")
edgesposterior<-edgep(samplefit, pdag=TRUE, burnin=0.2)
edgesposterior
suppressMessages({
library(ggraph)
library(igraph)
library(dplyr)
})
plot.bootstrapped <- function(boostrapped.bn)
{
boostrapped.bn %>%
dplyr::filter(strength > .50, direction >= .50) %>%
igraph::graph_from_data_frame(directed = TRUE) %>%
ggraph::ggraph(layout = "stress") +
ggraph::geom_edge_link(aes(color=strength,
edge_width=direction,
start_cap = label_rect(node1.name),
end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(4, 'mm'))) +
ggraph::geom_node_text(aes(label = name), size = 3) +
ggraph::scale_edge_color_viridis("Strength", end = .8,
limits = c(.5, 1), option = "B") +
ggraph::scale_edge_width("Direction", range=c(.5, 2), limits = c(.5, 1)) +
ggraph::theme_graph()
}
suppressMessages({
library(ggraph)
library(igraph)
library(dplyr)
})
plot.bootstrapped <- function(boostrapped.bn)
{
boostrapped.bn %>%
dplyr::filter(strength > .50, direction >= .50) %>%
igraph::graph_from_data_frame(directed = TRUE) %>%
ggraph::ggraph(layout = "stress") +
ggraph::geom_edge_link(aes(color=strength,
edge_width=direction,
start_cap = label_rect(node1.name),
end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(4, 'mm'))) +
ggraph::geom_node_text(aes(label = name), size = 3) +
ggraph::scale_edge_color_viridis("Strength", end = .8,
limits = c(.5, 1), option = "B") +
ggraph::scale_edge_width("Direction", range=c(.5, 2), limits = c(.5, 1)) +
ggraph::theme_graph()
}
library(bnlearn)
boot.tabu   <- boot.strength(Asia,
algorithm="tabu",algorithm.args = list(score="bic"))
cat.signalling.data
bnlearn:::learning.test
bnlearn::learning.test
bnlearn::asia
bnlearn::learning.test
bnlearn::asia
BiDAG::Asia
dim(BiDAG::Asia)
dim(bnlearn::asia)
boot.tabu   <- boot.strength(bnlearn::asia,
algorithm="tabu",algorithm.args = list(score="bic"))
boot.tabu.c <- boot.strength(signalling.data,
algorithm="tabu", algorithm.args = list(score="bic-g"))
plot.bootstrapped(boot.tabu.c)
head(boot.tabu)
boot.tabu   <- boot.strength(bnlearn::asia,
algorithm="tabu",algorithm.args = list(score="bic"))
boot.tabu.c <- boot.strength(signalling.data,
algorithm="tabu", algorithm.args = list(score="bic-g"))
boot.tabu.c <- boot.strength(bnlearn::asia,
algorithm="tabu", algorithm.args = list(score="bic-g"))
boot.tabu   <- boot.strength(bnlearn::asia,
algorithm="tabu",algorithm.args = list(score="bic"))
plot.bootstrapped(boot.tabu)
boot.tabu
Bostonscore
edgesposterior
Asiascore<-scoreparameters("bde", Asia)
samplefit<-sampleBN(Asiascore, "order")
edgesposterior<-edgep(samplefit, pdag=TRUE, burnin=0.2)
edgesposterior
edgesposterior
edgesposterior
boot.tabu
compareDAGs(eDAG$DAG,Asiamat)
plot(Asiamat)
plot_bn(Asiamat)
plot_dag(Asiamat)
boot.tabu   <- boot.strength(bnlearn::asia,
algorithm="tabu",algorithm.args = list(score="bic"))
BiDAG:::pmap
BiDAG::pmap
devtools::install_github("cutterkom/generativeart")
